package java1.day13.Ex01;

// 클래스 : 설계도 목적
// 설계도 안에서도 ->  1. 데이터 모델링을 하거나
//					2. 기능 패턴 구분 
public class Board {
	// -------------- 객체 --------------
		/*
			클래스/클래스 ------ new ------> 인스턴스/객체
			[ 개발자 작성]		인스턴스화	
	
		 */
	// ---------- 클래스 구성 멤버 ----------
	//1. 필드	: 객체의 데이터를 저장하는 곳
		// 변수랑 비슷하지만 변수와 다르다.
		/*
		 * 필드 종류
			- 인스턴스 필드 	: (힙영역에저장)객체 생성시 객체 안에 저장되어 있는 필드 
			- 정적 필드		: (메소드영역에저장)static 프로그램 실행시 우선할당 객체 없이 저장되어 있는 필드-사용가능
		 
		 * 필드 타입
		 	- 기본타입 		: boolean, char, byte, short, int, long, float, double 8가지
		 	- 참조타입 		: 클래스[객체], 인터페이스, 배열, 열거타입 등등

		 * 필드 접근 권한
			- 접근제한자 		: 외부에서 해당 필드를 접근할 수 있는 권한/제한
				public		: 프로젝트 모든 곳
				private		: 현재 클래스만
				default		: [생략] 동일한 패키지내에서만	
				protected
		 * 기타키워드
				- final 	   : [최종적] 수정불가 필드 만들기
				- static final : 프로그램 전체에서 상수 만들기 
		 * 싱글톤		 		: 프로그램내 1개만 존재하는 객체!!!!!!
				1. (싱글객체를 생성) private static사용하는 객체 선언
				2. 외부로 부터 접근할 수 있도록 public static getInstance() 싱글톤 객체를 반환해주는 함수 선언
				3. public 생성자() 외부로부터 생성자 사용금지
			
		 */
	
	//2. 생성자	: 객체를 초기화 할때 사용되는 메소드
		/*
		 * 생성자가 사용되는 경우는 객체가 생성될때 이다.
		 	클래스명	객체변수명 = new 생성자명();
		 	
		 * 생성자 선언
		 	접근제한자 클래스명 ( 타입 매개변수 , 타입 매개변수 ) {}
		 	
		 * 생성자 역할
		 	- 객체 생성시 매개변수를 받아서 필드에 저장
		 	- 유효성 검사 할때 / 계산식이 필요한 값을 필드에 저장할때 
		 	
		 * 생성자의 종류 [ 오버로딩으로 인해 다양하게 가능 ]
		 	- 오버로딩 	: 매개변수와 개수, 순서,타입에 따라서 식별가능한 것
		 	
		 * 접근제한 private, public, default
		 	
		 * 기타키워드
		 	- this 			: (생략가능) 현재 클래스의 구성멤버 식별할때 사용
		  	- this.필드명 	: 외부로 부터 들어온 매개변수명과 현재 클래스 내에 있는 필드명이 같을 경우 식별용으로 필드명앞에 사용한다.
		 	- this()		: 현재 클래스의 생성자 호출
		 	- this.메소드명()	: 현재 클래스의 메소드 호출 
		 */
	
	//3. 메소드	: 객체의 행동/조작 수행할때 사용 *데이터가 아니라서 메소드 영역에 저장된다.
		/*
		 * 메소드 종류
		  	- 인스턴스 메소드 	: 객체 생성시 사용 가능한 메소드
			- 정적 메소드		: (static) 객체 없이 사용 가능한 메소드
			
		 * 메소드 선언
		 	접근제한자 리턴타입 메소드명( 타입 매개변수, 타입 매개변수 ) {}
		 	 - 리턴타입 : 메소드 종료시 호출했던 곳으로 반환해주는 값의 타입
			 - 매개변수 : 메소드 호출시 매개변수 안으로 들어오는 변수 
			 - {}	  : 메소드 실행코드
			 - return : (void일때는 생략가능) 타입에 맞는 값을 리턴
			 
		 * 메소드 사용목적
		 	- 객체간에 상호작용을 할때 씀( 서로다른 클래스 간에 데이터를 옮길 수 있음)
		 	- 재활용성, 코드줄이기 / 클린코딩
		 	- 매개변수에 따른 서로 다른 실행/결과 반환
		 	
		 * 접근제한 private, public, default, protected

		 */
	/*

		필드 생성자 메소드를 이용한 프로그램 개발 => MVC 패턴
		- MVC 디자인 패턴
			V : 입출력 담당
				- HTML, JS 언어 사용되는 자리
				- console 역할은 임시로 대체해서 사용 ! 
			C : 제어/로직/기능처리/유효성 감사 등등 담당
				- 객체를 여러개 가질 필요가 없어.. 회원가입 기능 1개만 있어도 가능하니까!
				- 동일한 메소드를 갖는 객체가 있어도 되지만 굳이? 필요없다. -> 싱글톤쓰는 것을 권장 
			
			M : 데이터 모델과 실제 데이터
				DTO : 데이터의 이동 객체 [서로 다른 레이어간 이동할때 객체사용]
					1. 이동목적을 가진다.
					- int int String double float -> 이렇게 여러 타입을 5개를 각각 옮기는 것은 불편함
						vs 
					- DTO (객체)					  -> 포장지 하나로 담아서 옮기는 것이 편함 (하나의 객체로 만들기)
					2. DTO의 가독성
						Member 		: 회원객체인데 그래서 뭐하는 객체야????????
						MenberDto	: 회원 객체 인데 이동객체이구나? 라고 판단
				DAO	: 데이터의 접근 객체 [실제 원본 데이터(DB) 호출/저장 접근만!]
			
		- 외부 객체에서 메소드를 호출하는 방법
			1. 객체를 이용한 메소드 호출 (인스턴스)
				클래스명 객체 변수명 = new 생성자명();
				객체변수명.메소드명();
			2. 객체없이 정적[static] 메소드 호출
				클래스명.메소드명();
			3. 싱글톤/객체 내 인스턴스 메소드 호출
				클래스명.getInstance().메소드명();




	*/
}
