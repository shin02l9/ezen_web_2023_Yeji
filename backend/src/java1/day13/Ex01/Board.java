package java1.day13.Ex01;

// 클래스 : 설계도 목적
// 설계도 안에서도 ->  1. 데이터 모델링을 하거나
//					2. 기능 패턴 구분 
public class Board {
	// -------------- 객체 --------------
		/*
			클래스/클래스 ------ new ------> 인스턴스/객체
			[ 개발자 작성]		인스턴스화	
	
		 */
	// ---------- 클래스 구성 멤버 ----------
	//1. 필드	: 객체의 데이터를 저장하는 곳
		// 변수랑 비슷하지만 변수와 다르다.
		/*
		 * 필드 종류
			- 인스턴스 필드 	: (힙영역에저장)객체 생성시 객체 안에 저장되어 있는 필드 
			- 정적 필드		: (메소드영역에저장)static 프로그램 실행시 우선할당 객체 없이 저장되어 있는 필드-사용가능
		 
		 * 필드 타입
		 	- 기본타입 		: boolean, char, byte, short, int, long, float, double 8가지
		 	- 참조타입 		: 클래스[객체], 인터페이스, 배열, 열거타입 등등

		 * 필드 접근 권한
			- 접근제한자 		: 외부에서 해당 필드를 접근할 수 있는 권한/제한
				public		: 프로젝트 모든 곳
				private		: 현재 클래스만
				default		: [생략] 동일한 패키지내에서만	
				protected
		 * 기타키워드
				- final 	   : [최종적] 수정불가 필드 만들기
				- static final : 프로그램 전체에서 상수 만들기 
		 * 싱글톤		 		: 프로그램내 1개만 존재하는 객체!!!!!!
				1. (싱글객체를 생성) private static사용하는 객체 선언
				2. 외부로 부터 접근할 수 있도록 public static getInstance() 싱글톤 객체를 반환해주는 함수 선언
				3. public 생성자() 외부로부터 생성자 사용금지
			
		 */
	
	//2. 생성자	: 객체를 초기화 할때 사용되는 메소드
		/*
		 * 생성자가 사용되는 경우는 객체가 생성될때 이다.
		 	클래스명	객체변수명 = new 생성자명();
		 	
		 * 생성자 선언
		 	접근제한자 클래스명 ( 타입 매개변수 , 타입 매개변수 ) {}
		 	
		 * 생성자 역할
		 	- 객체 생성시 매개변수를 받아서 필드에 저장
		 	- 유효성 검사 할때 / 계산식이 필요한 값을 필드에 저장할때 
		 	
		 * 생성자의 종류 [ 오버로딩으로 인해 다양하게 가능 ]
		 	- 오버로딩 	: 매개변수와 개수, 순서,타입에 따라서 식별가능한 것
		 	
		 * 접근제한 private, public, default
		 	
		 * 기타키워드
		 	- this 			: (생략가능) 현재 클래스의 구성멤버 식별할때 사용
		  	- this.필드명 	: 외부로 부터 들어온 매개변수명과 현재 클래스 내에 있는 필드명이 같을 경우 식별용으로 필드명앞에 사용한다.
		 	- this()		: 현재 클래스의 생성자 호출
		 	- this.메소드명()	: 현재 클래스의 메소드 호출 
		 */
	
	//3. 메소드	: 객체의 행동/조작 수행할때 사용
}
