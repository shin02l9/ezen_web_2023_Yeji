package java2.day22.Ex_01;

import java.awt.Toolkit;

public class Ex_01멀티스레드 {

	public static void main(String[] args) {// 메인스레드가 main메소드를 호출하면서 프로세스가 시작된다.
		
		
		//p.596 예제1
		Toolkit toolkit = Toolkit.getDefaultToolkit(); // 그냥 외우기 ㅇㅅaㅇ 딱히 중요하지 않음
			// 5번 발생시켰지면 소리는 1번밖에 안난다.
			// 비프음보다 for문이 더 빨라서 그럼 ! 
		for( int i = 0; i < 5 ; i++) { toolkit.beep(); } // toolkit.beep(); 비프음 출력
		
		
		//-------------------------------1. 싱글 스레드------------------------------------------
			// 5번의 비프음을 발생 시키면서 for문에 딜레이를 줘서 소리를 5번 다 출력함
		for( int i = 0; i < 5 ; i++) {
			
			toolkit.beep();
			// 0.5초간 딜레이[ 메인스레드 잠깐 멈춤 ]
			try {// 예외처리 발생
				Thread.sleep(500); // 쓰레드를 잠깐 재운다.. 딜레이만들려고 / *1000이 1초임 ! 밀리초라서 ! 
			} catch (Exception e) {System.out.println(e);}
			
		}
		// 5번의 출력
		for( int i = 0; i < 5 ; i++) {
			
			System.out.println("띵");
			// 0.5초간 딜레이[ 메인스레드 잠깐 멈춤 ]
			try {// 예외처리 발생
				Thread.sleep(500); // 쓰레드를 잠깐 재운다.. 딜레이만들려고 / *1000이 1초임 ! 밀리초라서 ! 
			} catch (Exception e) {System.out.println(e);}
		}
		// ===> 소리와 출력이 동시에 실행되지 않고 소리부터나고 출력이 된다. (싱글스레드라서!)
		//-------------------------------싱글 스레드 end------------------------------------------
		
		
		System.out.println("멀티쓰레드 시작! 익명구현체!");
		//===============================2. 멀티 스레드[익명구현체]==========================================
		
		//1. [main 스레드가 작업스레드를 생성하고] main 스레드의 작업스레드 객체 만들기
		Thread thread = new Thread( new Runnable() {
			
			@Override
			public void run() {// Runnable 이라는 인터페이스의 추상메소드 구현
				Toolkit toolkit = Toolkit.getDefaultToolkit();
				for( int i = 0; i < 5 ; i++) {
					toolkit.beep();
					try {
						Thread.sleep(500);
					}catch (Exception e) {System.out.println(e);}
				}
			}// 추상메소드 구현 end
		}); // 생성자 end
		
		//2.  [main 스레드가 작업스레드를 실행하고] 작업스레드 시작
		thread.start(); // 여기서부터 멀티쓰레드가 작동되기 시작하는 것 !!!!!!!!!!!!!!!!!!!!!!!!!!
		
		//3.  main 스레드의 작업을 한다.
		for( int i = 0; i < 5 ; i++) {
			System.out.println("띵");
			// 0.5초간 딜레이[ 메인스레드 잠깐 멈춤 ]
			try {// 예외처리 발생
				Thread.sleep(500); // 쓰레드를 잠깐 재운다.. 딜레이만들려고 / *1000이 1초임 ! 밀리초라서 ! 
			} catch (Exception e) {System.out.println(e);}
		}
		
		//===============================멀티 스레드[익명구현체] end==========================================
		
		
		System.out.println("멀티쓰레드 시작! 구현체! 인터페이스이용 (권장) ");
		//===============================3. 멀티 스레드[구현체]==========================================
		비프음 비프음 = new 비프음();
		Thread thread2 = new Thread(비프음);
		thread2.start(); // Thread클래스에 start() 실행시 run 메소드 실행 
		
		// main 스레드 작업
		for( int i = 0; i < 5 ; i++) {
			System.out.println("띵");
			// 0.5초간 딜레이[ 메인스레드 잠깐 멈춤 ]
			try {// 예외처리 발생
				Thread.sleep(500); // 쓰레드를 잠깐 재운다.. 딜레이만들려고 / *1000이 1초임 ! 밀리초라서 ! 
			} catch (Exception e) {System.out.println(e);}
		}
	
		//===============================멀티 스레드[구현체] end==========================================
		
		
		System.out.println("멀티쓰레드 시작! 구현체! 상속이용 ");
		//===============================4. 멀티 스레드[구현체]==========================================
		비프음2 비프음2 = new 비프음2(); // Thread 자식객체 생성
		비프음2.start(); // run 메소드 실행 
		
		// main 스레드 작업
		for( int i = 0; i < 5 ; i++) {
			System.out.println("띵");
			// 0.5초간 딜레이[ 메인스레드 잠깐 멈춤 ]
			try {// 예외처리 발생
				Thread.sleep(500); // 쓰레드를 잠깐 재운다.. 딜레이만들려고 / *1000이 1초임 ! 밀리초라서 ! 
			} catch (Exception e) {System.out.println(e);}
		}
	
		//===============================멀티 스레드[구현체] end==========================================
			
	}
}
/*
	프로그램 : 명령문의 집합
		- 프로세스  	 : 실행중인 프로그램
		- 멀티태스킹 	 : 두가지 이상의 작업을 동시에 처리하는 것
		- 멀티프로세스  : 운영체제는 동시에 여러개 프로세스를 생성해서 처리		
		
		프로세스1					프로세스2
			스레드 					스레드1 
									스레드2	
									
		*멀티프로세스 	-> 프로그램 단위의 멀티태스킹
		*멀티스레드  	-> 프로그램 '내부'에서의 멀티태스킹
		
		- 멀티 프로세스는 서로 독립적이다. 
			- 한글프로그램(프로세스), 엑셀프로그램(프로세스) 동시에 사용시 한글에서 오류가 발생 하더라도 엑셀은 정상
		- 멀티스레드는 하나의 쓰레드에 오류가 발생하면 프로세스가 종료되므로 영향을 끼친다.
			- 카카오톡(프로세스[채팅기능(스레드),첨부파일전송기능(스레드)]) 파일전송스레드에서 오류가 발생하면 카카오톡 프로세스 전체가 종료되므로 채팅도 같이 종료!
			
	멀티스레드 : 병렬로 데이터 처리를 하는 곳에서 주로 사용
		1. 사용처 : 앱, 웹 등등 거의다 ..!!!!!!!!!
		2. 메인스레드 : 모든!!!자바 프로그램은 메인스레드가 main메소드를 실행하면서 시작된다. 
		3. 
			싱글스레드 : main메소드만 사용하는 경우 [*메인스레드가 종료되면 프로세스 종료]
			멀티스레드 : main메소드에 새로운 작업스레드를 생성하는 경우 [*모든스레드가 종료되면 프로세스 종료]
		4. 작업스레드 생성
			1. Thread 클래스로 직접 생성
				1. Thread 변수명 = new Thread( Runnable구현객체 );
				
		5. Runnable : 스레드가 작업을 실행 할때 사용하는 인터페이스 
			- run추상메소드 : [추상메소드] 작업스레드 실행코드 정의
		6. 익명[이름없는]객체
			익명객체
				클래스명 클래스 = new 클래스명(){ 오버라이딩 }
			익명구현체
				클래스명 클래스 = new 클래스명( new 인터페이스명(){ 오버라이딩 } )

			
*/