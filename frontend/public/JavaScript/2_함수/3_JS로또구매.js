/*
	주제 : 로또구매 프로그램
	요구사항
		1. 로또구매 버튼 클릭해서 실행
		2. 1~45개 버튼 화면에 표시
		3. 6개 버튼 선택 ( 중복 불가능 ) / 구매취소
		4. 6개 숫자 모두 선택시 추첨결과 버튼 활성화 / 유효성 검사
		5. 당첨번호 = 자동 난수(랜덤) 6개
		6. 선택한 6개 숫자와 당첨 번호 6개와 비교해서 결과 

 */


// 선택된 번호를 저장하는 배열
let 선택번호목록 = []
 
 //1. 로또 구매 함수 정의 [실행조건 : 로또구매버튼 클릭하면 실행]
 function 로또구매(){  //함수 시작
	 console.log ( ' 로또 구매 버튼 실행 ') // 클릭 이벤트까지 되는 거 확인.
	 
	 //1 ~ 45개의 버튼 생성해서 변수에 담기
	 let buttonHTML = ``;
	 for ( let i = 1 ; i <= 45 ; i++ ){ // for strat
		// i는 1부터 45까지 1씩 증가 반복
		
		// 버튼 하나씩 변수에 추가
		buttonHTML += `<button onclick = " 숫자버튼(${i})"> ${i} </button>` // i번째 버튼 생성
		
		// 만약에 i가 5의 배수이면 줄바꿈하기
		if( i % 5 == 0 ) buttonHTML += `<br/>`
		
	 }// for end
	 
	 
	 // for 에서 생성된 버튼 45개 버튼을 해당 div 에 추가하기.
		document.querySelector('.buttonlist').innerHTML = buttonHTML;
	 
 } // 함수 끝
 
 
 //2. 숫자 (선택) 버튼 함수 정의 [실행조건 : 1~45사이의 번호를 클릭하면 실행]
 function 숫자버튼( 선택된번호 ){ //함수 시작
	 console.log (선택된번호 + ' 숫자버튼을 클릭했군요.')
	 // push 하기전에 유효성 검사
	 // 중복검사 = 배열명.indexOf 
	 if( 선택번호목록.indexOf(선택된번호) != -1 ){// -1 이 동일한 데이터가 없다는 뜻 // != -1 : 배열내 존재하면
		 선택번호목록.splice ( 선택번호목록.indexOf(선택된번호), 1); // 이미 선택한 숫자를 한번 더 누르면 취소되게 하기
		 alert('이미 선택한 번호입니다.[해당 숫자는 취소합니다.]'); // 안내문구
		 선택번호출력(); //삭제 후 배열 상태를 출력 
		 return;
	 }
	 
	 // 6개 초과인지 체크하기 = 배열명.length : 배열내 데이터 개수/길이
	 if( 선택번호목록.length == 6){
		 alert (' 이미 6개의 번호를 선택 하셨습니다.');
		 return;
	 }  
	 
	 // 배열에 저장 (2개의 유효성 검사를 모두 통화 했을때 배열에 저장 )
	 선택번호목록.push(선택된번호); console.log (선택번호목록)
	 선택번호출력();// 추가 후 배열 상태를 출력
	 
 } // 함수 끝
 

 //3. 현재 선택된 번호들을 출력하는 함수 [실행조건 : 배열의 상태가 변화(수정,추가,삭제)하면 실행]
 function 선택번호출력(){
	 document.querySelector('.선택번호출력구역').innerHTML = 선택번호목록;

	 // 만약에 모두 선택 했으면
	 if(선택번호목록.length == 6){
		 document.querySelector('.추첨결과버튼구역').innerHTML = `<button onclick = "추첨결과()"> 추첨결과보기 </button>`
	 } else{ // 모두 선택 안했으면
		 document.querySelector('.추첨결과버튼구역').innerHTML = ` `
	 }
 }
 

 //4. 추첨결과 함수 [실행조건 : 배열내 6개의 숫자가 존재하고 추첨결과보기 버튼이 클릭되었을때]
 function 추첨결과(){ // 함수시작
	 alert (' 로또 추첨 진행합니다. [잠시 대기]');
	 
	 //1. 난수 생성 공식 : Math.random()*마지막번호+시작번호
	 console.log( Math.random() ) // Math.random() 0~1 사이의 난수(실수)를 랜덤으로 생성
	 console.log( Math.random() +1 ) // (0~1)+1 => 1~2사이의 난수를 생성하고 싶어요!!
	 console.log( Math.random()*45+1 ) // (0~1)*45+1 => 1~46 사이의 난수를 생성하고 싶어요!!
	 
	 //2. 난수의 실수를 정수로 바꾸고 싶어요. (소수점을 없애는 방법) : parseInt () : 소수점 버린다는 뜻
	 console.log (parseInt( Math.random()*45+1 ))
	 
	 // 추첨번호 목록 배열
	 let 추첨번호목록 = [] // 추첨번호 목록은 추첨할때마다 새롭게 등록하기 위해 함수안에서 선언.
	 
	 //3. 1~45 사이의 난수를 생성 후 중복검사해서 push  6회 반복
	 for( let i =1 ; i <=6 ; i++){ //6회
		 let 추첨번호 = parseInt(Math.random()*45+1) // 1~45사이에 난수 정수로 뽑기
		 if( 추첨번호목록.indexOf(추첨번호) == -1){
			 추첨번호목록.push(추첨번호); // 배열에 저장
		 }else{ // 중복값이 있다면
			 i--; // 다시돌게 하기 위함.
		 }
	 }
	 console.log (추첨번호목록)


 //5. 배열내의 중복 번호 찾아서 등수 매기기 
 	// 배열과 for 활용
 		// 방법 1. 일반 for문 ******************제일 중요 무조건 알아야 하는 방법
 	let 맞은개수 = 0;
 		for ( let i = 0 ; i < 선택번호목록.length ; i++){
			 if (추첨번호목록.indexOf( 선택번호목록[i]) != -1 ) { 맞은개수++; }
		 }
		 
		 console.log ( 맞은개수 )
		  alert ('맞은개수 : ' + 맞은개수)
 
/* 		
		// 방법2. 향상된 for문 [ for( let 반복변수명 in 배열명)]
 		for( let 인덱스 in 선택번호목록){ // 자동으로 0번 인덱스 부터 마지막 인덱스까지 반복변수에 대입
			 console.log (인덱스)
			 if( 추첨번호목록.indexOf(선택번호목록[인덱스] != -1)) { 맞은개수++; }
		 }
 		
		// 방법3. 향상된 for문 [ for( let 반복변수명 of 배열명)]	
		
		for ( let 데이터 of 선택번호목록 ){ // 자동으로 0번 인덱스부터 마지막 인덱스 까지의 데이터를 반복변수에 대입.
			console.log (데이터)
			if( 추첨번호목록.indexOf(데이터) != -1) { 맞은개수++; }
		}
		// 방법4. for 라이브러리 [ 배열명.forEach( ) vs 배열명.map( ) vs filter( )]	
							// { 배열명.forEach((반복변수명) => {실행문} )
							// { 배열명.forEach(( 데이터, 인덱스) => {실행문} )
		
		
		 선택번호목록.forEach((데이터, 인덱스) => {// { 배열명.forEach((반복변수명) => {실행문} )
			console.log ( 데이터 );  console.log ( 인덱스 );
			if( 추첨번호목록.indexOf(데이터) !== -1) { 맞은개수++; }
		 });
*/
 
 
  }// 함수 끝
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 